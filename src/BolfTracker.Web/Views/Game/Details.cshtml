@model BolfTracker.Web.GamePanelViewModel
@{
  ViewBag.Title = "Game Panel - Bolf Tracker";
  ViewBag.Section = "Game";
}
<div class="page-header">
  <div class="row">
    <div class="col-md-6">
      <h1>Game Panel - @String.Format("{0:d}", Model.Game.Date)</h1>
    </div>
    <div class="col-md-6">
      @if (HttpContext.Current.User.Identity.IsAuthenticated)
      {
        if (!Model.GameFinalized)
        {
          using (Html.BeginForm("Finalize", "Game", FormMethod.Post))
          {
        @Html.Hidden("gameId", Model.Game.Id)
        <input type="submit" class="btn pull-right" value="Finalize Game" />
          }
        }
      }
    </div>
  </div>
</div>
<div class="row">
  <div class="col-md-6">
    @if (HttpContext.Current.User.Identity.IsAuthenticated)
    {
      if (!Model.GameFinalized)
      {
        using (Html.BeginForm("Create", "Score", FormMethod.Post))
        {
          @Html.HiddenFor(m => m.Game.Id)
          <div class="form-group">
            <label for="player">Player</label>
            @Html.DropDownListFor(m => m.Player, Model.AllPlayers, new { @class = "form-control" })
          </div>
          <div class="form-group">
            <label for="hole">Hole</label>
            @Html.DropDownListFor(m => m.Hole, Model.AllHoles, new { @id = "currentHole", @class = "form-control" })
          </div>
          <div class="form-group">
            <label for="attempts">Attempts</label>
            <input type="text" pattern="[0-9]*" name="attempts" id="attempts" class="form-control" autocomplete="off" />
          </div>
          <div class="form-group">
            <label for="shotMade" class="checkbox">
              <input type="checkbox" name="shotMade" id="shotMade" />
              Shot Made
            </label>
          </div>
          <input type="submit" class="btn btn-primary" value="Save Shot" />
        }
      }
    }
  </div>
  <div class="col-md-6">
    <h2>Leaderboard</h2>
    @if (Model.Shots.Any())
    {
      <div class="table-responsive">
        <table id="leaderboard" class=" table table-bordered table-striped">
          <thead>
            <tr>
              <th title="Player">Player</th>
              <th title="Points">Points</th>
              <th title="Shooting Percentage">Shooting %</th>
              <th title="Steals">Steals</th>
              <th title="Pushes">Pushes</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var player in Model.Leaderboard)
            {
              <tr>
                <td>@Html.ActionLink(player.Player.Name, "Details", "Player", new { id = player.Player.Id, name = player.Player.UrlFriendlyName }, null)</td>
                <td>@player.Points</td>
                <td>@player.ShotsMade/@player.Attempts (@player.ShootingPercentage.ToString("P0"))</td>
                <td>@player.Steals</td>
                <td>@player.Pushes</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    }
    else
    {
      <p>Game has not started.</p> 
    }
    @if (!Model.GameFinalized)
    { 
      <p>Points Available: @Model.PointsAvailable</p>
      <p>Next Up (beta): @(Model.GetCurrentHole() >= 10 ? "?" : Model.GetNextPlayer().Name)</p>
    }
  </div>
</div>
<h2>Hole History</h2>
@if (Model.Shots.Any())
{
  int lastShot = Model.Shots.Max(s => s.Id);
  <div class="table-responsive">
    <table class="table table-condensed table-bordered table-striped">
      <thead>
        <tr>
          <th title="Hole" style="width: 50px; text-align: left;">Hole</th>
          <th title="Player" style="width: 150px; text-align: left;">Player</th>
          <th title="Attempts" style="width: 85px; text-align: left;">Attempts</th>
          <th title="Result" style="width: 200px; text-align: left;">Result</th>
          @if (!Model.GameFinalized)
          {
            <th></th>
          }
        </tr>
      </thead>
      <tbody>
        @foreach (var score in Model.Shots.OrderByDescending(s => s.Id))
        {
          <tr>
            <td>@score.Hole.Id</td>
            <td>@score.Player.Name</td>
            <td>@score.Attempts</td>
            <td>@score.ShotType.Name</td>
            @if (!Model.GameFinalized)
            {
              <td>
                @if (HttpContext.Current.User.Identity.IsAuthenticated)
                {
                  if (score.Id == lastShot && !Model.GameFinalized)
                  {
                    using (Html.BeginForm("Delete", "Score", FormMethod.Post, new { @style = "margin: 0;" }))
                    {
                      @Html.Hidden("scoreId", score.Id)
                      @Html.Hidden("gameId", score.Game.Id)
                      <input type="submit" class="btn btn-danger btn-xs" value="Delete" />
                    }
                  }
                }
              </td>
            }
          </tr>
        }
      </tbody>
    </table>
  </div>
}
else
{
  <p>Game has not started.</p> 
}
@section javascript {
  <script>
    var par = 0;
    var lastAttempt = 0;
@{
  var currentHole = Model.GetCurrentHole();
  @:par = @Model.Holes.FirstOrDefault(h => h.Id == currentHole).Par;
  if (Model.Shots.Any())
  {
    var lastShotAttempt = Model.Shots.LastOrDefault(s => s.Hole.Id == currentHole);
    if (lastShotAttempt != null)
    {
      @:lastAttempt = @lastShotAttempt.Attempts;
    }
  }
}

    $(function () {
      if (lastAttempt === 1 || par === 1) {
        $("#attempts").val(1);
      }

      $("#attempts").focus();

      $("#attempts").keydown(function (e) {
        var key = e.charCode || e.keyCode || 0;

        if (key == 8 || key == 9 || key == 46 || (key >= 37 && key <= 40) || (key >= 48 && key <= 57) || (key >= 96 && key <= 105)) {
          // Ignore
        } else {
          if (key != 13) {
            if (key < 95) {
              if (key < 48 || key > 57) {
                event.preventDefault();
              }
            } else {
              if (key < 96 || key > 105) {
                event.preventDefault();
              }
            }
          }
        }
      });
            
      $("body").keydown(function (event) {
        switch (event.keyCode) {
          case 77:
            if ($("#shotMade").attr("checked")) {
              $("#shotMade").removeAttr("checked");
            } else {
              $("#shotMade").attr("checked", "checked");
            }
            break;
        }
      });
    });
  </script>
}
